---
- hosts: all
  gather_facts: yes

  tasks:
    - name: Initialize
      shell: |
        sudo chmod 600 .ssh/id_rsa*
        sudo sed -i.bak -e 's/^ - set_hostname/# - set_hostname/' -e 's/^ - update_hostname/# - update_hostname/' /etc/cloud/cloud.cfg
        sudo hostnamectl set-hostname --static ${lower(var.name_prefix)}tang-${count.index}.${var.domain}
        echo 'HOSTNAME=${lower(var.name_prefix)}tang-${count.index}.${var.domain}' | sudo tee -a /etc/sysconfig/network > /dev/null
        sudo hostname -F /etc/hostname
        echo 'vm.max_map_count = 262144' | sudo tee --append /etc/sysctl.conf > /dev/null
        # Set SMT to user specified value; Should not fail for invalid values.
        sudo ppc64_cpu --smt=${var.rhel_smt} | true
        # turn off rx and set mtu to var.private_network_mtu for all ineterfaces to improve network performance
        cidrs=("${ibm_pi_network.public_network.pi_cidr}" "${data.ibm_pi_network.network.cidr}")
        for cidr in "$${cidrs[@]}"; do
        envs=($(ip r | grep "$cidr dev" | awk '{print $3}'))
        for env in "$${envs[@]}"; do
        con_name=$(sudo nmcli -t -f NAME connection show | grep $env)
        sudo nmcli connection modify "$con_name" ethtool.feature-rx off
        sudo nmcli connection modify "$con_name" ethernet.mtu ${var.private_network_mtu}
        sudo nmcli connection up "$con_name"
        done
        done
    - name: Setup Proxy Info
      shell: |
        echo "Setting up proxy details..."
        # System
        set http_proxy="http://${var.proxy[0].user_pass}${var.proxy[0].server}:${var.proxy[0].port}"
        set https_proxy="http://${var.proxy[0].user_pass}${var.proxy[0].server}:${var.proxy[0].port}"
        set no_proxy="${var.proxy[0].no_proxy}"
        echo "export http_proxy=\"http://${var.proxy[0].user_pass}${var.proxy[0].server}:${var.proxy[0].port}\"" | sudo tee /etc/profile.d/http_proxy.sh > /dev/null
        echo "export https_proxy=\"http://${var.proxy[0].user_pass}${var.proxy[0].server}:${var.proxy[0].port}\"" | sudo tee -a /etc/profile.d/http_proxy.sh > /dev/null
        echo "export no_proxy=\"${var.proxy[0].no_proxy}\"" | sudo tee -a /etc/profile.d/http_proxy.sh > /dev/null
        # RHSM
        sudo sed -i -e 's/^proxy_hostname =.*/proxy_hostname = ${var.proxy[0].server}/' /etc/rhsm/rhsm.conf
        sudo sed -i -e 's/^proxy_port =.*/proxy_port = ${var.proxy[0].port}/' /etc/rhsm/rhsm.conf
        sudo sed -i -e 's/^proxy_user =.*/proxy_user = ${var.proxy[0].user}/' /etc/rhsm/rhsm.conf
        sudo sed -i -e 's/^proxy_password =.*/proxy_password = ${var.proxy[0].user_pass}/' /etc/rhsm/rhsm.conf
        # YUM/DNF
        # Incase /etc/yum.conf is a symlink to /etc/dnf/dnf.conf we try to update the original file
        yum_dnf_conf=$(readlink -f -q /etc/yum.conf)
        sudo sed -i -e '/^proxy.*/d' $yum_dnf_conf
        echo "proxy=http://${var.proxy[0].server}:${var.proxy[0].port}" | sudo tee -a $yum_dnf_conf > /dev/null
        echo "proxy_username=${var.proxy[0].user}" | sudo tee -a $yum_dnf_conf > /dev/null
        echo "proxy_password=${var.proxy[0].user_pass}" | sudo tee -a $yum_dnf_conf > /dev/null
    - name: Register with Red Hat Network
      shell: |
        TODO: add conditional (var.rhel_subscription_username == "" || var.rhel_subscription_username == "<subscription-id>") && var.rhel_subscription_org == "" ? 0 : var.tang.count
        
        # Give some more time to subscription-manager
        sudo subscription-manager config --server.server_timeout=600
        sudo subscription-manager clean
        if [[ '${var.rhel_subscription_username}' != '' && '${var.rhel_subscription_username}' != '<subscription-id>' ]]; then
          sudo subscription-manager register --username='${var.rhel_subscription_username}' --password='${var.rhel_subscription_password}' --force
        else
          sudo subscription-manager register --org='${var.rhel_subscription_org}' --activationkey='${var.rhel_subscription_activationkey}' --force
        fi
        sudo subscription-manager refresh
        sudo subscription-manager attach --auto
    - name: Add route to Tang server
      command: route add -net 0.0.0.0/0 gw "{{bastion_ip}}" env2
    - name: Add EPEL and Conditional RHN Subscription
      shell: |
        # Additional repo for installing ansible package
        if ( [[ -z "${var.rhel_subscription_username}" ]] || [[ "${var.rhel_subscription_username}" == "<subscription-id>" ]] ) && [[ -z "${var.rhel_subscription_org}" ]]; then
          sudo yum install -y epel-release
        else
          # Setup RHEL9 subscription
          os_ver=$(cat /etc/os-release | egrep "^VERSION_ID=" | awk -F'"' '{print $2}')
          sudo subscription-manager register --username="{{username}}" --password="{{password}}" --force
          if [[ $os_ver != "9"* ]]; then
            sudo subscription-manager repos --enable ${var.ansible_repo_name}
          else
            sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
          fi
        fi
    - name: Install Packages
      shell: |
        sudo yum update -y --skip-broken
        sudo yum install -y wget jq git net-tools vim python3 tar
    - name: Install Ansible
      shell: |
        sudo yum install -y 'ansible-2.9.*'
    - name: Enable Reliable Scalable Cluster Technology (RSCT)
      shell: |
        sudo yum install -y rsct.basic.ppc64le rsct.core.ppc64le rsct.core.utils.ppc64le rsct.opt.storagerm.ppc64le
    - name: Remove Cloud Init
        sudo yum remove cloud-init --noautoremove -y
    - name: Setup Networking
      shell: |
        sysctl -w net.ipv4.ip_forward=1
        sudo systemctl unmask NetworkManager
        sudo systemctl start NetworkManager
        for i in $(nmcli device | grep unmanaged | awk '{print $1}'); do echo NM_CONTROLLED=yes | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-$i; done
        sudo systemctl restart NetworkManager
        sudo systemctl enable NetworkManager
    - name: Cleanup Terraform
      shell: |
        sudo rm -rf /tmp/terraform_*